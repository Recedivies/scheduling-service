variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  POSTGRES_DB: law_2_db
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REGISTRY_USER: $REGISTRY_USER
  IMAGE_NAME: $IMAGE_NAME
  IMAGE_TAG: latest
  CONTAINER_NAME: $CONTAINER_NAME
  GCP_USERNAME: $GCP_USERNAME
  GCP_STATIC_IP: $GCP_STATIC_IP

stages:
  - build
  - test
  - publish
  - deploy

Build:
  stage: build
  image: gradle:jdk17-alpine
  before_script:
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle wrapper
    - ./gradlew assemble
    - ls
  artifacts:
    when: always
    paths:
      - build/libs/*.jar
    expire_in: 1 week

Publish Docker Build:
  stage: publish
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
      alias: docker
  dependencies:
    - Build
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs/client"
  before_script:
    - echo $DOCKER_PASSWORD | docker login -u $REGISTRY_USER --password-stdin docker.io
  script:
    - ls
    - docker build --build-arg PRODUCTION="$PRODUCTION" --build-arg JDBC_DATABASE_PASSWORD="$JDBC_DATABASE_PASSWORD" --build-arg JDBC_DATABASE_URL="$JDBC_DATABASE_URL" --build-arg JDBC_DATABASE_USERNAME="$JDBC_DATABASE_USERNAME" --build-arg REDIS_URL="$REDIS_URL" --build-arg RABBITMQ_HOST="$RABBITMQ_HOST" --build-arg RABBITMQ_PORT="$RABBITMQ_PORT" --build-arg RABBITMQ_USER="$RABBITMQ_USER" --build-arg RABBITMQ_PASSWORD="$RABBITMQ_PASSWORD" -t $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG
  only:
    - main

Deploy Prod:
  stage: deploy
  image: alpine:latest
  before_script:
    - chmod 400 $SSH_KEY
    - apk update && apk add openssh-client
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $GCP_USERNAME@$GCP_STATIC_IP "
      docker container rm -f $CONTAINER_NAME || true &&
      docker image rm -f $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG || true &&
      docker run --name $CONTAINER_NAME -d -p 80:8080 --restart unless-stopped $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG"
  only:
    - main
# Sonarcloud:
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
#     GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
#   stage: sonarcloud
#   image: gradle:jdk17-alpine
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - gradle sonarqube
#     - gradle test jacocoTestReport sonarqube
#   allow_failure: true
